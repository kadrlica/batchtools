#!/usr/bin/python -uES

############################################################################ 
#                                                                          # 
#  A front-end wrapper around 'condor_rm' which mimicks the basic          # 
#  functionality of 'bkill' for LSF. Currently only works with the         # 
#  vanilla universe (due to issues in the 'getenv' option).                # 
#                                                                          # 
#  NOTE: This uses /usr/bin/python not /usr/bin/env python and the -ES     # 
#  option for faster startup. This needed to be compatible with older      # 
#  versions of python (>2.4.3), which dictated the use of optparse.        # 
#                                                                          # 
#  TODO:                                                                   # 
#                                                                          # 
#  @author: Alex Drlica-Wagner <kadrlica@fnal.gov>                         # 
#                                                                          # 
############################################################################ 
__author__ = "Alex Drlica-Wagner"
__email__ = "kadrlica@fnal.gov"

import os
import sys
import subprocess
import optparse

# https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=MagicNumbers
JOB_STATUS = dict([
    ('unexpanded',0),
    ('idle',1),
    ('running',2),
    ('removed',3),
    ('completed',4),
    ('held',5),
    ('transfer',6),
    ('suspended',7),
])

CMD = 'condor_rm'
UNIVERSES=['local','vanilla','grid']
usage = "Usage: %prog [options] [jobId]..."
description = "A simple python wrapper around `condor_rm` for removing jobs from HTCondor."
parser = optparse.OptionParser(usage=usage,description=description)
parser.disable_interspersed_args()
parser.add_option('-u',dest='universe',default='vanilla',choices=UNIVERSES,
    help="set the universe to kill from.")
parser.add_option('--host', default='all', metavar='host1[,host2,...]',
    help="kill from a comma-delimited list of hosts")
parser.add_option('-a','--all', action='store_true',default=False,
    help="all jobs")
parser.add_option('-r','--running',action='store_true',
    help="running jobs")
parser.add_option('-p','--pending',action='store_true',
    help="pending (idle) jobs")
parser.add_option('-s','--suspend',action='store_true',
    help="suspended (held) jobs")
parser.add_option('-d','--debug',action='store_true',
    help="debug execution")
parser.add_option('-v','--verbose',action='store_true',
    help="verbose output")
(opts, args) = parser.parse_args()

if opts.debug: opts.verbose = True
    
cmd = CMD

jobstatus = []
if opts.pending: jobstatus += [JOB_STATUS['idle']]
if opts.running: jobstatus += [JOB_STATUS['running']]
if opts.suspend: jobstatus += [JOB_STATUS['held'],JobStatus['suspended']]
if jobstatus:        
    jobstr = ["(JobStatus == %s)"%i for i in jobstatus]
    cmd   += " -constraint '%s'"%('||'.join(jobstr))

if opts.host and ('all' not in opts.host): 
    hosts = []
    for h in opts.host.split(','):
        if h.lower()=='none': hosts += ["(RemoteHost =?= UNDEFINED)"]
        else: hosts+=['regexp("%s.fnal.gov$", RemoteHost)'%h.split('.fnal.gov')[0]]
    cmd += " -constraint '%s'"%("||".join(hosts))

# Job ID(s)
if (args == ['0']) or (opts.all):
    cmd += ' -all'
else:
    cmd += ' '+' '.join(args)
 
if opts.verbose: print(cmd)

if cmd == CMD:
    parser.print_help()
    sys.exit(1)
    
if opts.debug:
    status = 0
else:
    proc = subprocess.Popen(cmd,shell=True,stderr=subprocess.PIPE,stdout=subprocess.PIPE,
                            universal_newlines=True)
    stdout,stderr = proc.communicate()
    status = proc.poll()
    if stdout: print(stdout.strip())
    if stderr: print(stderr.strip())
 
sys.exit(status)
