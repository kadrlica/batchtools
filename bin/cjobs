#!/usr/bin/python -uES

############################################################################ 
#                                                                          # 
#  A front-end wrapper around 'condor_q' which mimicks the basic           # 
#  functionality of 'bjobs' for LSF. Currently only works with the         # 
#  vanilla universe (due to issues in the 'getenv' option).                # 
#                                                                          # 
#  NOTE: This uses /usr/bin/python not /usr/bin/env python and the -ES     # 
#  option for faster startup. This needed to be compatible with older      # 
#  versions of python (>2.4.3), which dictated the use of optparse.        # 
#                                                                          # 
#  TODO:                                                                   # 
#                                                                          # 
#  @author: Alex Drlica-Wagner <kadrlica@fnal.gov>                         # 
#                                                                          # 
############################################################################ 
__author__ = "Alex Drlica-Wagner"
__email__ = "kadrlica@fnal.gov"

import os
import sys
import subprocess
import optparse
import getpass
import tempfile

# https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=MagicNumbers
JOB_STATUS = dict([
    ('unexpanded',0),
    ('idle',1),
    ('running',2),
    ('removed',3),
    ('completed',4),
    ('held',5),
    ('transfer',6),
    ('suspended',7),
])

# Experimental print format:
# https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=ExperimentalCustomPrintFormats
# See source code here:
# https://github.com/htcondor/htcondor/blob/master/src/condor_utils/make_printmask.cpp
# https://github.com/htcondor/htcondor/blob/master/src/condor_q.V6/queue.cpp

# Hacking the default condor_q output
# https://htcondor-wiki.cs.wisc.edu/index.cgi/wiki?p=HowToWriteaCondorqWrapper

DEFAULT_FORMAT = """# queue.cpf
# produce the standard output of condor_q
SELECT
   ClusterId     AS " ID"  NOSUFFIX WIDTH 4
   ProcId        AS " "    NOPREFIX             PRINTF ".%-3d"
   Owner         AS "OWNER"         WIDTH -14   
   QDate         AS " SUBMITTED"    WIDTH 11    PRINTAS QDATE
   {RemoteUserCpu,RemoteWallClockTime,ShadowBday,ServerTime}[0] AS "    RUN_TIME"  WIDTH 12    PRINTAS CPU_TIME
   JobStatus     AS ST                          PRINTAS JOB_STATUS
   JobPrio       AS PRI
   ImageSize     AS SIZE            WIDTH 4     PRINTAS MEMORY_USAGE
   Cmd           AS CMD             WIDTH -18   PRINTAS JOB_DESCRIPTION
SUMMARY STANDARD
"""

CUSTOM_FORMAT = """# produce custom output for cjobs
SELECT
   ClusterId     AS "  ID"  NOSUFFIX WIDTH 6
   ProcId        AS " "    NOPREFIX             PRINTF ".%-2d"
   Owner         AS "OWNER"         WIDTH -10
   QDate         AS " SUBMITTED"    WIDTH 11    PRINTAS QDATE
   {RemoteUserCpu,RemoteWallClockTime,ShadowBday,ServerTime}[0] AS "  RUN_TIME"  WIDTH 12    PRINTAS CPU_TIME
   JobStatus     AS ST                          PRINTAS JOB_STATUS
   JobPrio       AS PR
   ImageSize     AS SIZE            WIDTH 4     PRINTAS MEMORY_USAGE
   ifThenElse(isUndefined(RemoteHost),"",split(RemoteHost,".")[0]) AS HOST
#   Cmd           AS CMD             WIDTH -18   PRINTAS JOB_DESCRIPTION
SUMMARY STANDARD
"""
# To print job batch name
#   JobBatchName  AS "NAME"         WIDTH -10

CMD = 'condor_q'
UNIVERSES=['local','vanilla','grid']
usage = "Usage: %prog [options] [jobId]..."
description = "A Python wrapper around `condor_q` for accessing job information from HTCondor."
parser = optparse.OptionParser(usage=usage,description=description)
parser.disable_interspersed_args()
parser.add_option('-q',dest='universe',default='vanilla',choices=UNIVERSES,
    help="set the universe to which the job is submitted")
parser.add_option('-u','--user',default=getpass.getuser(),
    help="specify username")
parser.add_option('--host', default=None,
    help="check jobs from a specific host or 'all'")
parser.add_option('-r','--running', action='store_true',
    help="running jobs")
parser.add_option('-p','--pending',action='store_true',
    help="pending (idle) jobs")
parser.add_option('-s','--suspend',action='store_true',
    help="held or suspended jobs")
parser.add_option('-d','--debug',action='store_true',
    help="debug execution")
parser.add_option('-l','--long',action='store_true',
    help="long output")
parser.add_option('-b','--batch',action='store_true',
    help="batch output (version >= 8.6)")
parser.add_option('-J','--batch_name', default=None, type=str,
    help="jobs that match a specific batch")
parser.add_option('-v','--verbose',action='store_true',
    help="verbose output")
(opts, args) = parser.parse_args()

if opts.debug: opts.verbose = True
    
cmd = CMD

if opts.user: 
    if opts.user=='all': cmd += ' -allusers'
    else: cmd += " %s"%opts.user

if opts.host:
    if opts.host=='all': cmd += ' -global'
    else: cmd += " -name %s.fnal.gov"%h.split('.fnal.gov')[0]    

jobstatus = []
if opts.pending: jobstatus += [JOB_STATUS['idle']]
if opts.running: jobstatus += [JOB_STATUS['running']]
if opts.suspend: jobstatus += [JOB_STATUS['held'],JobStatus['suspended']]
if jobstatus:        
    jobstr = ['(JobStatus == %s)'%i for i in jobstatus]
    cmd   += " -constraint '%s'"%("||".join(jobstr))

if opts.batch_name:
    cmd += " -constraint 'JobBatchName == \"%s\"'"%(opts.batch_name)
    
#if opts.host and ('all' not in opts.host): 
#    hosts = []
#    for h in opts.host.split(','):
#        if h.lower()=='none': hosts += ["(RemoteHost =?= UNDEFINED)"]
#        else: hosts+=['regexp("%s.fnal.gov$", RemoteHost)'%h.split('.fnal.gov')[0]]
#    cmd += " -constraint '%s'"%("||".join(hosts))

# Formatting
tmp = tempfile.NamedTemporaryFile(suffix='.cfg',mode='w')
tmp.write(CUSTOM_FORMAT)
tmp.flush()

if opts.batch: 
    cmd += " -batch"
elif opts.long:  
    cmd += " -l"
else: 
    cmd += " -pr " + tmp.name

# Job ID(s)
cmd += ' '+' '.join(args)

if opts.verbose: print(cmd)
    
proc = subprocess.Popen(cmd,shell=True,stderr=subprocess.PIPE,stdout=subprocess.PIPE,
                        universal_newlines=True)
stdout,stderr = proc.communicate()
status = proc.poll()
if stdout: print(stdout.strip())
if stderr: print(stderr.strip())

tmp.close()
sys.exit(status)
